
DHT22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005cc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000790  08000790  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000790  08000790  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000790  08000790  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000790  08000790  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000790  08000790  00010790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000794  08000794  00010794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000000c  080007a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080007a4  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a55  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000360  00000000  00000000  00020a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f0  00000000  00000000  00020df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a8  00000000  00000000  00020ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f06  00000000  00000000  00020f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000733  00000000  00000000  00021e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003c2a  00000000  00000000  000225c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000261f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000260  00000000  00000000  00026244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000778 	.word	0x08000778

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08000778 	.word	0x08000778

08000204 <DHT_VoidInit>:
#include "DHT_Interface.h"
#include "DHT_Cfg.h"
#include "DHT_Pri.h"

void DHT_VoidInit(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
	 * ----          ---------------
	 *    \       /                 \
	 *      ------                    --------
	 *      18ms
	 * */
	PinConfig_t DHT_Pin={DHT22_PORT,DHT22_PIN,
 800020a:	2300      	movs	r3, #0
 800020c:	703b      	strb	r3, [r7, #0]
 800020e:	2300      	movs	r3, #0
 8000210:	707b      	strb	r3, [r7, #1]
 8000212:	2301      	movs	r3, #1
 8000214:	70bb      	strb	r3, [r7, #2]
 8000216:	2300      	movs	r3, #0
 8000218:	70fb      	strb	r3, [r7, #3]
 800021a:	2300      	movs	r3, #0
 800021c:	713b      	strb	r3, [r7, #4]
 800021e:	2300      	movs	r3, #0
 8000220:	717b      	strb	r3, [r7, #5]
 8000222:	2300      	movs	r3, #0
 8000224:	71bb      	strb	r3, [r7, #6]
			GPIO_OUTPUT,GPIO_OUTPUT_LOW_SPEED,
			GPIO_OUTPUT_PUSH_PULL,0,0};
	MGPIO_VoidSetPinConfg(&DHT_Pin);
 8000226:	463b      	mov	r3, r7
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f835 	bl	8000298 <MGPIO_VoidSetPinConfg>
	GPIO_voidSetPinValue(DHT22_PORT,DHT22_PIN, GPIO_u8_PIN_LOW);
 800022e:	2200      	movs	r2, #0
 8000230:	2100      	movs	r1, #0
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f95c 	bl	80004f0 <GPIO_voidSetPinValue>
	// delay 18 mS
	GPIO_voidSetPinValue(DHT22_PORT,DHT22_PIN, GPIO_u8_PIN_HIGH);
 8000238:	2201      	movs	r2, #1
 800023a:	2100      	movs	r1, #0
 800023c:	2000      	movs	r0, #0
 800023e:	f000 f957 	bl	80004f0 <GPIO_voidSetPinValue>
	// delay 20-40 Ms

	// SET pin input to Get response
	(DHT_Pin.GPIO_u8Mode)=	GPIO_INPUT;
 8000242:	2300      	movs	r3, #0
 8000244:	70bb      	strb	r3, [r7, #2]
	MGPIO_VoidSetPinConfg(&DHT_Pin);
 8000246:	463b      	mov	r3, r7
 8000248:	4618      	mov	r0, r3
 800024a:	f000 f825 	bl	8000298 <MGPIO_VoidSetPinConfg>

}
 800024e:	bf00      	nop
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}

08000256 <DHT_u8CheckResponce>:

u8 DHT_u8CheckResponce(void)
{
 8000256:	b480      	push	{r7}
 8000258:	b083      	sub	sp, #12
 800025a:	af00      	add	r7, sp, #0
	u8 Local_Responce=0;
 800025c:	2300      	movs	r3, #0
 800025e:	71fb      	strb	r3, [r7, #7]
		// delay 80 MS
		if (GET_BIT(DHT22_PORT,DHT22_PIN)==1) // if high
		{
			Local_Responce=1;    // start trans
		}
		else Local_Responce=0;
 8000260:	2300      	movs	r3, #0
 8000262:	71fb      	strb	r3, [r7, #7]

		while (GET_BIT(DHT22_PORT,DHT22_PIN)); // pin become low
 8000264:	bf00      	nop

		return Local_Responce;
 8000266:	79fb      	ldrb	r3, [r7, #7]

	}
}
 8000268:	4618      	mov	r0, r3
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr

08000274 <DHT_u8ReadData>:

u8 DHT_u8ReadData(void)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
	 *    |                   |
	 * ___|                   |___
	 *
	 * */

	u8 local_8bitData=0;// to save data
 800027a:	2300      	movs	r3, #0
 800027c:	71bb      	strb	r3, [r7, #6]
	 u8 local_couter;  // to pickup 8 bit
	for(local_couter=0;local_couter<8;local_couter++)
 800027e:	2300      	movs	r3, #0
 8000280:	71fb      	strb	r3, [r7, #7]
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	2b07      	cmp	r3, #7
 8000286:	d800      	bhi.n	800028a <DHT_u8ReadData+0x16>
	{
		// wait bin to be high
		while(!(GET_BIT(DHT22_PORT,DHT22_PIN)));
 8000288:	e7fe      	b.n	8000288 <DHT_u8ReadData+0x14>

		// wait bin to be low
		while((GET_BIT(DHT22_PORT,DHT22_PIN))==0);

	}
	return local_8bitData;
 800028a:	79bb      	ldrb	r3, [r7, #6]

}
 800028c:	4618      	mov	r0, r3
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr

08000298 <MGPIO_VoidSetPinConfg>:


static  GPIO_Reg_Cfg* Port_Num[MAX_PORT_NUM]={GPIOA,GPIOB,GPIOC,};

u8 MGPIO_VoidSetPinConfg(const PinConfig_t * AS_Pin_Cfg )
{
 8000298:	b480      	push	{r7}
 800029a:	b085      	sub	sp, #20
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	u8 Local_Erorr_state =OK;
 80002a0:	2301      	movs	r3, #1
 80002a2:	73fb      	strb	r3, [r7, #15]

	if (AS_Pin_Cfg == NULL)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d102      	bne.n	80002b0 <MGPIO_VoidSetPinConfg+0x18>
	{
		Local_Erorr_state=NULL_POINTER;
 80002aa:	2302      	movs	r3, #2
 80002ac:	73fb      	strb	r3, [r7, #15]
 80002ae:	e115      	b.n	80004dc <MGPIO_VoidSetPinConfg+0x244>
	}
	else if (((AS_Pin_Cfg->GPIO_u8Port )<=GPIO_u8_GPIOC)&&
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b02      	cmp	r3, #2
 80002b6:	f200 810d 	bhi.w	80004d4 <MGPIO_VoidSetPinConfg+0x23c>
			((AS_Pin_Cfg->GPIO_u8PinNumber )<=GPIO_u8_PIN15))
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	785b      	ldrb	r3, [r3, #1]
	else if (((AS_Pin_Cfg->GPIO_u8Port )<=GPIO_u8_GPIOC)&&
 80002be:	2b0f      	cmp	r3, #15
 80002c0:	f200 8108 	bhi.w	80004d4 <MGPIO_VoidSetPinConfg+0x23c>
	{
		// set Pin mode
		(Port_Num[AS_Pin_Cfg->GPIO_u8Port]->MODER) &=~(0b11 <<AS_Pin_Cfg->GPIO_u8PinNumber*2);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	461a      	mov	r2, r3
 80002ca:	4b88      	ldr	r3, [pc, #544]	; (80004ec <MGPIO_VoidSetPinConfg+0x254>)
 80002cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	785b      	ldrb	r3, [r3, #1]
 80002d6:	005b      	lsls	r3, r3, #1
 80002d8:	2103      	movs	r1, #3
 80002da:	fa01 f303 	lsl.w	r3, r1, r3
 80002de:	43db      	mvns	r3, r3
 80002e0:	4619      	mov	r1, r3
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	4618      	mov	r0, r3
 80002e8:	4b80      	ldr	r3, [pc, #512]	; (80004ec <MGPIO_VoidSetPinConfg+0x254>)
 80002ea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80002ee:	400a      	ands	r2, r1
 80002f0:	601a      	str	r2, [r3, #0]
		(Port_Num[AS_Pin_Cfg->GPIO_u8Port]->MODER )|=((AS_Pin_Cfg->GPIO_u8Mode) <<(AS_Pin_Cfg->GPIO_u8PinNumber)*2);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	461a      	mov	r2, r3
 80002f8:	4b7c      	ldr	r3, [pc, #496]	; (80004ec <MGPIO_VoidSetPinConfg+0x254>)
 80002fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	789b      	ldrb	r3, [r3, #2]
 8000304:	4619      	mov	r1, r3
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	785b      	ldrb	r3, [r3, #1]
 800030a:	005b      	lsls	r3, r3, #1
 800030c:	fa01 f303 	lsl.w	r3, r1, r3
 8000310:	4619      	mov	r1, r3
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	4618      	mov	r0, r3
 8000318:	4b74      	ldr	r3, [pc, #464]	; (80004ec <MGPIO_VoidSetPinConfg+0x254>)
 800031a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800031e:	430a      	orrs	r2, r1
 8000320:	601a      	str	r2, [r3, #0]

		// set input type
		(Port_Num[AS_Pin_Cfg->GPIO_u8Port]->PUPDR)&=~(0b11<<(AS_Pin_Cfg->GPIO_u8PinNumber)*2);
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	461a      	mov	r2, r3
 8000328:	4b70      	ldr	r3, [pc, #448]	; (80004ec <MGPIO_VoidSetPinConfg+0x254>)
 800032a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800032e:	68da      	ldr	r2, [r3, #12]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	785b      	ldrb	r3, [r3, #1]
 8000334:	005b      	lsls	r3, r3, #1
 8000336:	2103      	movs	r1, #3
 8000338:	fa01 f303 	lsl.w	r3, r1, r3
 800033c:	43db      	mvns	r3, r3
 800033e:	4619      	mov	r1, r3
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	4618      	mov	r0, r3
 8000346:	4b69      	ldr	r3, [pc, #420]	; (80004ec <MGPIO_VoidSetPinConfg+0x254>)
 8000348:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800034c:	400a      	ands	r2, r1
 800034e:	60da      	str	r2, [r3, #12]
		(Port_Num[AS_Pin_Cfg->GPIO_u8Port]->PUPDR)|=((AS_Pin_Cfg->GPIO_u8PullUpDown)<<(AS_Pin_Cfg->GPIO_u8PinNumber)*2);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	461a      	mov	r2, r3
 8000356:	4b65      	ldr	r3, [pc, #404]	; (80004ec <MGPIO_VoidSetPinConfg+0x254>)
 8000358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800035c:	68da      	ldr	r2, [r3, #12]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	795b      	ldrb	r3, [r3, #5]
 8000362:	4619      	mov	r1, r3
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	785b      	ldrb	r3, [r3, #1]
 8000368:	005b      	lsls	r3, r3, #1
 800036a:	fa01 f303 	lsl.w	r3, r1, r3
 800036e:	4619      	mov	r1, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	4618      	mov	r0, r3
 8000376:	4b5d      	ldr	r3, [pc, #372]	; (80004ec <MGPIO_VoidSetPinConfg+0x254>)
 8000378:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800037c:	430a      	orrs	r2, r1
 800037e:	60da      	str	r2, [r3, #12]
		if (AS_Pin_Cfg->GPIO_u8Mode==GPIO_OUTPUT)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	789b      	ldrb	r3, [r3, #2]
 8000384:	2b01      	cmp	r3, #1
 8000386:	d15c      	bne.n	8000442 <MGPIO_VoidSetPinConfg+0x1aa>
		{
			// Set output type
			(Port_Num[AS_Pin_Cfg->GPIO_u8Port]->OTYPER )&=~(0b1<<AS_Pin_Cfg->GPIO_u8PinNumber);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	461a      	mov	r2, r3
 800038e:	4b57      	ldr	r3, [pc, #348]	; (80004ec <MGPIO_VoidSetPinConfg+0x254>)
 8000390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000394:	685a      	ldr	r2, [r3, #4]
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	785b      	ldrb	r3, [r3, #1]
 800039a:	4619      	mov	r1, r3
 800039c:	2301      	movs	r3, #1
 800039e:	408b      	lsls	r3, r1
 80003a0:	43db      	mvns	r3, r3
 80003a2:	4619      	mov	r1, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	4618      	mov	r0, r3
 80003aa:	4b50      	ldr	r3, [pc, #320]	; (80004ec <MGPIO_VoidSetPinConfg+0x254>)
 80003ac:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80003b0:	400a      	ands	r2, r1
 80003b2:	605a      	str	r2, [r3, #4]
			(Port_Num[AS_Pin_Cfg->GPIO_u8Port]->OTYPER) |=(AS_Pin_Cfg->GPIO_u8Mode <<AS_Pin_Cfg->GPIO_u8PinNumber);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	461a      	mov	r2, r3
 80003ba:	4b4c      	ldr	r3, [pc, #304]	; (80004ec <MGPIO_VoidSetPinConfg+0x254>)
 80003bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003c0:	685a      	ldr	r2, [r3, #4]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	789b      	ldrb	r3, [r3, #2]
 80003c6:	4619      	mov	r1, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	785b      	ldrb	r3, [r3, #1]
 80003cc:	fa01 f303 	lsl.w	r3, r1, r3
 80003d0:	4619      	mov	r1, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	4618      	mov	r0, r3
 80003d8:	4b44      	ldr	r3, [pc, #272]	; (80004ec <MGPIO_VoidSetPinConfg+0x254>)
 80003da:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80003de:	430a      	orrs	r2, r1
 80003e0:	605a      	str	r2, [r3, #4]

			// set Pin Speed
			(Port_Num[AS_Pin_Cfg->GPIO_u8Port]->OSPEEDR) &=~(0b11 <<AS_Pin_Cfg->GPIO_u8PinNumber*2);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	461a      	mov	r2, r3
 80003e8:	4b40      	ldr	r3, [pc, #256]	; (80004ec <MGPIO_VoidSetPinConfg+0x254>)
 80003ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003ee:	689a      	ldr	r2, [r3, #8]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	785b      	ldrb	r3, [r3, #1]
 80003f4:	005b      	lsls	r3, r3, #1
 80003f6:	2103      	movs	r1, #3
 80003f8:	fa01 f303 	lsl.w	r3, r1, r3
 80003fc:	43db      	mvns	r3, r3
 80003fe:	4619      	mov	r1, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	4618      	mov	r0, r3
 8000406:	4b39      	ldr	r3, [pc, #228]	; (80004ec <MGPIO_VoidSetPinConfg+0x254>)
 8000408:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800040c:	400a      	ands	r2, r1
 800040e:	609a      	str	r2, [r3, #8]
			(Port_Num[AS_Pin_Cfg->GPIO_u8Port]->OSPEEDR) |=(AS_Pin_Cfg->GPIO_u8OutputSpeed <<AS_Pin_Cfg->GPIO_u8PinNumber*2);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	461a      	mov	r2, r3
 8000416:	4b35      	ldr	r3, [pc, #212]	; (80004ec <MGPIO_VoidSetPinConfg+0x254>)
 8000418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800041c:	689a      	ldr	r2, [r3, #8]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	78db      	ldrb	r3, [r3, #3]
 8000422:	4619      	mov	r1, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	785b      	ldrb	r3, [r3, #1]
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	fa01 f303 	lsl.w	r3, r1, r3
 800042e:	4619      	mov	r1, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	4618      	mov	r0, r3
 8000436:	4b2d      	ldr	r3, [pc, #180]	; (80004ec <MGPIO_VoidSetPinConfg+0x254>)
 8000438:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800043c:	430a      	orrs	r2, r1
 800043e:	609a      	str	r2, [r3, #8]
		if (AS_Pin_Cfg->GPIO_u8Mode==GPIO_OUTPUT)
 8000440:	e04b      	b.n	80004da <MGPIO_VoidSetPinConfg+0x242>
		}
		else if(AS_Pin_Cfg->GPIO_u8Mode==GPIO_ALTFUNC)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	789b      	ldrb	r3, [r3, #2]
 8000446:	2b02      	cmp	r3, #2
 8000448:	d147      	bne.n	80004da <MGPIO_VoidSetPinConfg+0x242>
		{
			// Swt AF function
			u8 Local_Reg_index=0;
 800044a:	2300      	movs	r3, #0
 800044c:	73bb      	strb	r3, [r7, #14]
			Local_Reg_index=(AS_Pin_Cfg->GPIO_u8PinNumber)/8;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	785b      	ldrb	r3, [r3, #1]
 8000452:	08db      	lsrs	r3, r3, #3
 8000454:	73bb      	strb	r3, [r7, #14]
			u8 local_pin_Num =(AS_Pin_Cfg->GPIO_u8PinNumber)%8;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	785b      	ldrb	r3, [r3, #1]
 800045a:	f003 0307 	and.w	r3, r3, #7
 800045e:	737b      	strb	r3, [r7, #13]
			(Port_Num[AS_Pin_Cfg->GPIO_u8Port]->AFR[Local_Reg_index])&=~(0b1111<<(local_pin_Num)*4);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	461a      	mov	r2, r3
 8000466:	4b21      	ldr	r3, [pc, #132]	; (80004ec <MGPIO_VoidSetPinConfg+0x254>)
 8000468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800046c:	7bba      	ldrb	r2, [r7, #14]
 800046e:	3208      	adds	r2, #8
 8000470:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000474:	7b7b      	ldrb	r3, [r7, #13]
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	220f      	movs	r2, #15
 800047a:	fa02 f303 	lsl.w	r3, r2, r3
 800047e:	43db      	mvns	r3, r3
 8000480:	4618      	mov	r0, r3
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	461a      	mov	r2, r3
 8000488:	4b18      	ldr	r3, [pc, #96]	; (80004ec <MGPIO_VoidSetPinConfg+0x254>)
 800048a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800048e:	7bba      	ldrb	r2, [r7, #14]
 8000490:	4001      	ands	r1, r0
 8000492:	3208      	adds	r2, #8
 8000494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			(Port_Num[AS_Pin_Cfg->GPIO_u8Port]->AFR[Local_Reg_index])|=((AS_Pin_Cfg->GPIO_u8AltFuncOption)<<(local_pin_Num)*4);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	461a      	mov	r2, r3
 800049e:	4b13      	ldr	r3, [pc, #76]	; (80004ec <MGPIO_VoidSetPinConfg+0x254>)
 80004a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004a4:	7bba      	ldrb	r2, [r7, #14]
 80004a6:	3208      	adds	r2, #8
 80004a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	799b      	ldrb	r3, [r3, #6]
 80004b0:	461a      	mov	r2, r3
 80004b2:	7b7b      	ldrb	r3, [r7, #13]
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ba:	4618      	mov	r0, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	461a      	mov	r2, r3
 80004c2:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <MGPIO_VoidSetPinConfg+0x254>)
 80004c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004c8:	7bba      	ldrb	r2, [r7, #14]
 80004ca:	4301      	orrs	r1, r0
 80004cc:	3208      	adds	r2, #8
 80004ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if (AS_Pin_Cfg->GPIO_u8Mode==GPIO_OUTPUT)
 80004d2:	e002      	b.n	80004da <MGPIO_VoidSetPinConfg+0x242>
		}

	}
	else
	{
		Local_Erorr_state=NOK;
 80004d4:	2300      	movs	r3, #0
 80004d6:	73fb      	strb	r3, [r7, #15]
 80004d8:	e000      	b.n	80004dc <MGPIO_VoidSetPinConfg+0x244>
		if (AS_Pin_Cfg->GPIO_u8Mode==GPIO_OUTPUT)
 80004da:	bf00      	nop
	}

	return Local_Erorr_state;
 80004dc:	7bfb      	ldrb	r3, [r7, #15]

}
 80004de:	4618      	mov	r0, r3
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	20000000 	.word	0x20000000

080004f0 <GPIO_voidSetPinValue>:
/******************************************************************************/
u8 GPIO_voidSetPinValue(u8 Copy_u8Port,u8 Copy_u8pin,u8 Copy_u8value)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]
 80004fa:	460b      	mov	r3, r1
 80004fc:	71bb      	strb	r3, [r7, #6]
 80004fe:	4613      	mov	r3, r2
 8000500:	717b      	strb	r3, [r7, #5]
	u8 Local_Erorr_state=OK;
 8000502:	2301      	movs	r3, #1
 8000504:	73fb      	strb	r3, [r7, #15]
	if (Copy_u8Port<=GPIO_u8_GPIOC && Copy_u8pin<=GPIO_u8_PIN15)
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	2b02      	cmp	r3, #2
 800050a:	d82e      	bhi.n	800056a <GPIO_voidSetPinValue+0x7a>
 800050c:	79bb      	ldrb	r3, [r7, #6]
 800050e:	2b0f      	cmp	r3, #15
 8000510:	d82b      	bhi.n	800056a <GPIO_voidSetPinValue+0x7a>
	{
		if (Copy_u8value==GPIO_u8_PIN_HIGH)
 8000512:	797b      	ldrb	r3, [r7, #5]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d110      	bne.n	800053a <GPIO_voidSetPinValue+0x4a>
		{
			SET_BIT(Port_Num[Copy_u8Port]->ODR,Copy_u8pin);
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	4a18      	ldr	r2, [pc, #96]	; (800057c <GPIO_voidSetPinValue+0x8c>)
 800051c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000520:	695a      	ldr	r2, [r3, #20]
 8000522:	79bb      	ldrb	r3, [r7, #6]
 8000524:	2101      	movs	r1, #1
 8000526:	fa01 f303 	lsl.w	r3, r1, r3
 800052a:	4618      	mov	r0, r3
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	4913      	ldr	r1, [pc, #76]	; (800057c <GPIO_voidSetPinValue+0x8c>)
 8000530:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000534:	4302      	orrs	r2, r0
 8000536:	615a      	str	r2, [r3, #20]
		if (Copy_u8value==GPIO_u8_PIN_HIGH)
 8000538:	e019      	b.n	800056e <GPIO_voidSetPinValue+0x7e>
		}
		else if (Copy_u8value==GPIO_u8_PIN_LOW)
 800053a:	797b      	ldrb	r3, [r7, #5]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d111      	bne.n	8000564 <GPIO_voidSetPinValue+0x74>
		{
			CLR_BIT(Port_Num[Copy_u8Port]->ODR,Copy_u8pin);
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	4a0e      	ldr	r2, [pc, #56]	; (800057c <GPIO_voidSetPinValue+0x8c>)
 8000544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000548:	695a      	ldr	r2, [r3, #20]
 800054a:	79bb      	ldrb	r3, [r7, #6]
 800054c:	2101      	movs	r1, #1
 800054e:	fa01 f303 	lsl.w	r3, r1, r3
 8000552:	43db      	mvns	r3, r3
 8000554:	4618      	mov	r0, r3
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	4908      	ldr	r1, [pc, #32]	; (800057c <GPIO_voidSetPinValue+0x8c>)
 800055a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800055e:	4002      	ands	r2, r0
 8000560:	615a      	str	r2, [r3, #20]
		if (Copy_u8value==GPIO_u8_PIN_HIGH)
 8000562:	e004      	b.n	800056e <GPIO_voidSetPinValue+0x7e>
		}
		else
		{
			Local_Erorr_state=NOK;
 8000564:	2300      	movs	r3, #0
 8000566:	73fb      	strb	r3, [r7, #15]
		if (Copy_u8value==GPIO_u8_PIN_HIGH)
 8000568:	e001      	b.n	800056e <GPIO_voidSetPinValue+0x7e>
		}

	}
	else
	{
		Local_Erorr_state=NOK;
 800056a:	2300      	movs	r3, #0
 800056c:	73fb      	strb	r3, [r7, #15]
	}
	return Local_Erorr_state;
 800056e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000570:	4618      	mov	r0, r3
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	20000000 	.word	0x20000000

08000580 <MRCC_VoidInit>:
 * Return:	void
 *
 ******************************************************************************/

void MRCC_VoidInit(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
	// CLK SYS state
#if CSS_STATE==CSS_ENABLE
	SET_BIT(RCC->CR,CR_CSSON);
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <MRCC_VoidInit+0x44>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <MRCC_VoidInit+0x44>)
 800058a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800058e:	6013      	str	r3, [r2, #0]
	CLR_BIT(RCC->CR,CR_CSSON);
#endif

	// select SYSCLK switch  to HSE

	SET_BIT(RCC->CFGR,SW0);
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <MRCC_VoidInit+0x44>)
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <MRCC_VoidInit+0x44>)
 8000596:	f043 0301 	orr.w	r3, r3, #1
 800059a:	6093      	str	r3, [r2, #8]
	// select the system clock source
#if SYSTEM_CLOCK==RCC_HSI
	SET_BIT(RCC->CR,CR_HSION);
 800059c:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <MRCC_VoidInit+0x44>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a08      	ldr	r2, [pc, #32]	; (80005c4 <MRCC_VoidInit+0x44>)
 80005a2:	f043 0301 	orr.w	r3, r3, #1
 80005a6:	6013      	str	r3, [r2, #0]
	while(GET_BIT(RCC->CR,CR_HSIRDY)==0);
 80005a8:	bf00      	nop
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <MRCC_VoidInit+0x44>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	085b      	lsrs	r3, r3, #1
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0f8      	beq.n	80005aa <MRCC_VoidInit+0x2a>
    	SET_BIT(RCC->CR,CR_HSEON);
	while(GET_BIT(RCC->CR,CR_HSERDY)==0);
#endif
	//  sat clock bypass

}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	40023800 	.word	0x40023800

080005c8 <RCC_VoidEnableCLK>:
 *             Copy_u8Peripheral : select peripheral to enable
 * Return:	void
 *
 ******************************************************************************/
void RCC_VoidEnableCLK(u8 Copy_u8BusName , u8 Copy_u8Peripheral )
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	460a      	mov	r2, r1
 80005d2:	71fb      	strb	r3, [r7, #7]
 80005d4:	4613      	mov	r3, r2
 80005d6:	71bb      	strb	r3, [r7, #6]

	switch( Copy_u8BusName)
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	2b03      	cmp	r3, #3
 80005dc:	d836      	bhi.n	800064c <RCC_VoidEnableCLK+0x84>
 80005de:	a201      	add	r2, pc, #4	; (adr r2, 80005e4 <RCC_VoidEnableCLK+0x1c>)
 80005e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e4:	080005f5 	.word	0x080005f5
 80005e8:	0800060b 	.word	0x0800060b
 80005ec:	08000621 	.word	0x08000621
 80005f0:	08000637 	.word	0x08000637
	{

	case AHB1 : SET_BIT(RCC->AHB1ENR,Copy_u8Peripheral );break;
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <RCC_VoidEnableCLK+0x90>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f8:	79ba      	ldrb	r2, [r7, #6]
 80005fa:	2101      	movs	r1, #1
 80005fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000600:	4611      	mov	r1, r2
 8000602:	4a15      	ldr	r2, [pc, #84]	; (8000658 <RCC_VoidEnableCLK+0x90>)
 8000604:	430b      	orrs	r3, r1
 8000606:	6313      	str	r3, [r2, #48]	; 0x30
 8000608:	e020      	b.n	800064c <RCC_VoidEnableCLK+0x84>
	case AHB2 : SET_BIT(RCC->AHB2ENR,Copy_u8Peripheral );break;
 800060a:	4b13      	ldr	r3, [pc, #76]	; (8000658 <RCC_VoidEnableCLK+0x90>)
 800060c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800060e:	79ba      	ldrb	r2, [r7, #6]
 8000610:	2101      	movs	r1, #1
 8000612:	fa01 f202 	lsl.w	r2, r1, r2
 8000616:	4611      	mov	r1, r2
 8000618:	4a0f      	ldr	r2, [pc, #60]	; (8000658 <RCC_VoidEnableCLK+0x90>)
 800061a:	430b      	orrs	r3, r1
 800061c:	6353      	str	r3, [r2, #52]	; 0x34
 800061e:	e015      	b.n	800064c <RCC_VoidEnableCLK+0x84>
	case APB1 : SET_BIT(RCC->APB1ENR,Copy_u8Peripheral );break;
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <RCC_VoidEnableCLK+0x90>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	79ba      	ldrb	r2, [r7, #6]
 8000626:	2101      	movs	r1, #1
 8000628:	fa01 f202 	lsl.w	r2, r1, r2
 800062c:	4611      	mov	r1, r2
 800062e:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <RCC_VoidEnableCLK+0x90>)
 8000630:	430b      	orrs	r3, r1
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	e00a      	b.n	800064c <RCC_VoidEnableCLK+0x84>
	case APB2 : SET_BIT(RCC->APB2ENR,Copy_u8Peripheral );break;
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <RCC_VoidEnableCLK+0x90>)
 8000638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800063a:	79ba      	ldrb	r2, [r7, #6]
 800063c:	2101      	movs	r1, #1
 800063e:	fa01 f202 	lsl.w	r2, r1, r2
 8000642:	4611      	mov	r1, r2
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <RCC_VoidEnableCLK+0x90>)
 8000646:	430b      	orrs	r3, r1
 8000648:	6453      	str	r3, [r2, #68]	; 0x44
 800064a:	bf00      	nop
	}

}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	40023800 	.word	0x40023800

0800065c <main>:
#include "RCC_Intrface.h"
#include "GPIO_Interface.h"
#include "DHT_Interface.h"

int main (void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
	u8 Temp_1=0;
 8000662:	2300      	movs	r3, #0
 8000664:	73fb      	strb	r3, [r7, #15]
	u8 Temp_2=0;
 8000666:	2300      	movs	r3, #0
 8000668:	73bb      	strb	r3, [r7, #14]
	u8 Rh_1=0;
 800066a:	2300      	movs	r3, #0
 800066c:	737b      	strb	r3, [r7, #13]
	u8 Rh_2=0;
 800066e:	2300      	movs	r3, #0
 8000670:	733b      	strb	r3, [r7, #12]
	u8 Sum=0;
 8000672:	2300      	movs	r3, #0
 8000674:	72fb      	strb	r3, [r7, #11]
	u16 Temp=0;
 8000676:	2300      	movs	r3, #0
 8000678:	813b      	strh	r3, [r7, #8]
	u16 Rh=0;
 800067a:	2300      	movs	r3, #0
 800067c:	80fb      	strh	r3, [r7, #6]
	MRCC_VoidInit();
 800067e:	f7ff ff7f 	bl	8000580 <MRCC_VoidInit>
	RCC_VoidEnableCLK(AHB1,GPIOA_PERIPHERAL);
 8000682:	2100      	movs	r1, #0
 8000684:	2000      	movs	r0, #0
 8000686:	f7ff ff9f 	bl	80005c8 <RCC_VoidEnableCLK>

	while (1)
	{
		DHT_VoidInit();
 800068a:	f7ff fdbb 	bl	8000204 <DHT_VoidInit>
		DHT_u8CheckResponce();
 800068e:	f7ff fde2 	bl	8000256 <DHT_u8CheckResponce>
		Temp_1=DHT_u8ReadData();
 8000692:	f7ff fdef 	bl	8000274 <DHT_u8ReadData>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]
		Temp_2=DHT_u8ReadData();
 800069a:	f7ff fdeb 	bl	8000274 <DHT_u8ReadData>
 800069e:	4603      	mov	r3, r0
 80006a0:	73bb      	strb	r3, [r7, #14]
		Rh_1=DHT_u8ReadData();
 80006a2:	f7ff fde7 	bl	8000274 <DHT_u8ReadData>
 80006a6:	4603      	mov	r3, r0
 80006a8:	737b      	strb	r3, [r7, #13]
		Rh_2=DHT_u8ReadData();
 80006aa:	f7ff fde3 	bl	8000274 <DHT_u8ReadData>
 80006ae:	4603      	mov	r3, r0
 80006b0:	733b      	strb	r3, [r7, #12]
		Sum=DHT_u8ReadData();
 80006b2:	f7ff fddf 	bl	8000274 <DHT_u8ReadData>
 80006b6:	4603      	mov	r3, r0
 80006b8:	72fb      	strb	r3, [r7, #11]
		Temp=((Temp_1<<8)|Temp_2);
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	021b      	lsls	r3, r3, #8
 80006be:	b21a      	sxth	r2, r3
 80006c0:	7bbb      	ldrb	r3, [r7, #14]
 80006c2:	b21b      	sxth	r3, r3
 80006c4:	4313      	orrs	r3, r2
 80006c6:	b21b      	sxth	r3, r3
 80006c8:	813b      	strh	r3, [r7, #8]
		Rh=((Rh_1<<8)|Rh_2);
 80006ca:	7b7b      	ldrb	r3, [r7, #13]
 80006cc:	021b      	lsls	r3, r3, #8
 80006ce:	b21a      	sxth	r2, r3
 80006d0:	7b3b      	ldrb	r3, [r7, #12]
 80006d2:	b21b      	sxth	r3, r3
 80006d4:	4313      	orrs	r3, r2
 80006d6:	b21b      	sxth	r3, r3
 80006d8:	80fb      	strh	r3, [r7, #6]
		DHT_VoidInit();
 80006da:	e7d6      	b.n	800068a <main+0x2e>

080006dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006dc:	480d      	ldr	r0, [pc, #52]	; (8000714 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e4:	480c      	ldr	r0, [pc, #48]	; (8000718 <LoopForever+0x6>)
  ldr r1, =_edata
 80006e6:	490d      	ldr	r1, [pc, #52]	; (800071c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e8:	4a0d      	ldr	r2, [pc, #52]	; (8000720 <LoopForever+0xe>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ec:	e002      	b.n	80006f4 <LoopCopyDataInit>

080006ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f2:	3304      	adds	r3, #4

080006f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f8:	d3f9      	bcc.n	80006ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fa:	4a0a      	ldr	r2, [pc, #40]	; (8000724 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006fc:	4c0a      	ldr	r4, [pc, #40]	; (8000728 <LoopForever+0x16>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000700:	e001      	b.n	8000706 <LoopFillZerobss>

08000702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000704:	3204      	adds	r2, #4

08000706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000708:	d3fb      	bcc.n	8000702 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800070a:	f000 f811 	bl	8000730 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800070e:	f7ff ffa5 	bl	800065c <main>

08000712 <LoopForever>:

LoopForever:
    b LoopForever
 8000712:	e7fe      	b.n	8000712 <LoopForever>
  ldr   r0, =_estack
 8000714:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800071c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000720:	08000798 	.word	0x08000798
  ldr r2, =_sbss
 8000724:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000728:	20000028 	.word	0x20000028

0800072c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800072c:	e7fe      	b.n	800072c <ADC_IRQHandler>
	...

08000730 <__libc_init_array>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	4d0d      	ldr	r5, [pc, #52]	; (8000768 <__libc_init_array+0x38>)
 8000734:	4c0d      	ldr	r4, [pc, #52]	; (800076c <__libc_init_array+0x3c>)
 8000736:	1b64      	subs	r4, r4, r5
 8000738:	10a4      	asrs	r4, r4, #2
 800073a:	2600      	movs	r6, #0
 800073c:	42a6      	cmp	r6, r4
 800073e:	d109      	bne.n	8000754 <__libc_init_array+0x24>
 8000740:	4d0b      	ldr	r5, [pc, #44]	; (8000770 <__libc_init_array+0x40>)
 8000742:	4c0c      	ldr	r4, [pc, #48]	; (8000774 <__libc_init_array+0x44>)
 8000744:	f000 f818 	bl	8000778 <_init>
 8000748:	1b64      	subs	r4, r4, r5
 800074a:	10a4      	asrs	r4, r4, #2
 800074c:	2600      	movs	r6, #0
 800074e:	42a6      	cmp	r6, r4
 8000750:	d105      	bne.n	800075e <__libc_init_array+0x2e>
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f855 3b04 	ldr.w	r3, [r5], #4
 8000758:	4798      	blx	r3
 800075a:	3601      	adds	r6, #1
 800075c:	e7ee      	b.n	800073c <__libc_init_array+0xc>
 800075e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000762:	4798      	blx	r3
 8000764:	3601      	adds	r6, #1
 8000766:	e7f2      	b.n	800074e <__libc_init_array+0x1e>
 8000768:	08000790 	.word	0x08000790
 800076c:	08000790 	.word	0x08000790
 8000770:	08000790 	.word	0x08000790
 8000774:	08000794 	.word	0x08000794

08000778 <_init>:
 8000778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800077a:	bf00      	nop
 800077c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800077e:	bc08      	pop	{r3}
 8000780:	469e      	mov	lr, r3
 8000782:	4770      	bx	lr

08000784 <_fini>:
 8000784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000786:	bf00      	nop
 8000788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800078a:	bc08      	pop	{r3}
 800078c:	469e      	mov	lr, r3
 800078e:	4770      	bx	lr
